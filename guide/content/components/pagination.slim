---
title: Pagination
---

markdown:
  Help users navigate forwards and backwards through a series of pages.

  Pagination is a complex problem and it goes beyond the scope of this gem.
  Instead of implementing something from scratch this library uses
  [Pagy](https://ddnexus.github.io/pagy/), a small and modular pagination
  gem for Ruby.

== render('/partials/example.*',
  caption: "Basic pagination with a Pagy object",
  code: pagination_normal,
  data: pagination_normal_data) do

  markdown:
    Pagination links can be generated by passing a Pagy object directly to the
    component.

== render('/partials/example.*',
  caption: "When there are lots of pages",
  code: pagination_lots_of_pages,
  data: pagination_lots_of_pages_data) do

  markdown:
    Pagy [is very configurable](https://ddnexus.github.io/pagy/docs/api/pagy/#variables)
    and projects might want to tweak the defaults to suit their needs.

    To match the guidance in the
    [Design System documentation](https://design-system.service.gov.uk/components/pagination/#for-larger-numbers-of-pages),
    Pagy's [default size parameter](https://ddnexus.github.io/pagy/docs/how-to/#control-the-page-links&gsc.tab=0)
    should be set to `[1, 1, 1, 1]`.

    This means that:

    * 1 page is shown at the beginning
    * 1 page is shown before the current page
    * 1 page is shown after the current page
    * 1 page is shown at the end

== render('/partials/example.*',
  caption: "For smaller numbers of pages",
  code: pagination_vertical) do

  markdown:
    Use ‘Previous’ and ‘Next’ links to let users navigate through a small
    number of pages. Stack the links vertically with `block_mode: true` so
    they’re more obvious to screen magnifier users when they’re zoomed in.

== render('/partials/example.*',
  caption: "Full manual control",
  code: pagination_manual,
  data: manual_pagination_items) do

  markdown:
    If you have specific requirements that aren't met by Pagy you can take
    full control of the pagination component's contents by calling the slots
    individually.

    You can use this approach to add custom HTML attributes to the next,
    previous and item slots or to add a custom ellipsis layout.
